#!/bin/bash
#Sébastien Clément, 2025-04-04
#Script to format tree ring data 
#	FROM: 	Windendro format intended for use in Peter Newton's Stem Analysis Software (SAP) 
#	TO:		one-row-per-ring-width format, suitable for database storage



#-------------------------------------------------------------------
#TODO:
#-------------------------------------------------------------------



#-------------------------------------------------------------------
#Usage
#-------------------------------------------------------------------

#bash bash_extract_rings_from_windendro_format.txt [infolder] [harvest_years_and_reading_dirs file]
#Where:
#	[infolder]: subfolder in current folder, where all Windendro input files are.
#	[harvest_years_and_reading_dirs file]: file containing for each Windendro file the harvest year and reading direction (see below).
#

#-------------------------------------------------------------------
#Considerations
#-------------------------------------------------------------------
#	File name is made of 2 letters, then a string representing the tree name, followed by the extension (.txt, .dat)
#		Example: SGA1012.txt --> tree name: A1012
#	Each row starting with an integer represents a new disc
#	Each disc has 4+ radii measured for ring widths
#	Discs are always ordered from the stump to the apex.
#	Any height with 0 rings represents the apex. All data at this height will be ignored.
#		If apex is anywhere else than at the end, extraction of other discs will not be made as the script moves to another tree.


#-------------------------------------------------------------------
#Required files
#-------------------------------------------------------------------

#A. List of input file names (column #1)with harvest year (column #2)and reading direction (column#3) containing either "pith2b" or "bark2p":
#-------------------------------------------------------------------
#Example: harvest_year_and_reading_dir.txt
#	SW170004.A22	2005	PITH2b
#	SW170022.A22	2005	PITH2b
#	SW170029.A22	2005	PITH2b
#	SW180031.A22	2005	PITH2b
#	(...)

#B. Windendro ring files
#-------------------------------------------------------------------
#Input format 1 (example: SGA1012.txt)
#	- Rings no and sampling height on the same row as first radius ring widths
#	- All rows use tabs as field separators
#	- Columns 1 and 2 are rings count and sampling height, respectively
#	- Column 3 is radius width (sum of all ring widths)
#	- Columns 4 and +: ring widths

#57	0.059999999	77.616	1.064	1.307	2.244	2.393	2.730	2.201	3.090	4.064	3.344	3.344	2.963	1.482	2.371	3.175	3.302	2.752	3.217	2.667	1.524	1.524	1.778	1.736	1.397	1.566	1.778	0.847	1.016	1.397	1.037	1.185	1.545	1.312	1.016	0.762	0.550	1.016	0.889	0.572	0.868	0.974	0.487	0.297	0.317	0.338	0.127	0.148	0.148	0.148	0.381	0.296	0.170	0.168	0.169	0.106	0.148	0.106	0.063
#		89.665	1.231	1.285	2.184	2.625	2.752	2.371	2.963	4.445	3.641	3.641	4.191	1.863	2.921	3.387	3.471	3.302	3.133	3.175	2.752	2.540	2.117	1.820	1.609	1.863	1.397	1.228	1.270	1.524	1.143	1.058	1.696	1.013	1.185	1.101	1.143	0.890	1.058	0.634	0.931	0.720	0.550	0.381	0.382	0.254	0.402	0.275	0.212	0.275	0.296	0.550	0.868	0.339	0.275	0.169	0.275	0.402	0.487
#		85.789	0.931	1.736	1.905	2.307	2.646	2.667	2.794	3.810	3.810	3.090	3.090	1.609	2.371	3.006	3.556	3.154	3.535	3.387	2.709	2.371	2.286	1.905	1.990	1.609	1.461	1.079	1.228	1.630	1.037	1.122	1.376	1.206	0.847	1.122	0.741	0.783	0.868	0.804	1.249	0.635	0.550	0.656	0.635	0.783	0.318	0.211	0.190	0.233	0.635	0.614	0.317	0.148	0.148	0.212	0.254	0.233	0.190
#		65.948	1.104	1.224	2.286	2.244	2.540	1.947	2.794	3.979	3.471	3.344	3.217	1.693	2.159	2.625	3.048	2.752	1.905	2.159	2.201	1.693	1.651	1.080	1.355	1.482	1.016	0.783	0.762	1.037	0.783	0.698	0.698	0.719	0.762	0.487	0.254	0.212	0.275	0.465	0.550	0.423	0.169	0.212	0.190	0.317	0.222	0.191	0.159	0.074	0.070	0.036	0.068	0.049	0.079	0.048	0.081	0.046	0.060
#50	1.299999952	68.074	2.140	3.321	4.530	4.403	3.810	3.641	2.371	3.006	3.556	2.709	2.498	3.217	2.286	2.032	1.820	1.312	1.524	0.953	1.376	1.397	0.656	0.656	0.847	0.677	0.974	0.974	0.889	0.699	0.614	0.339	0.762	0.720	0.423	0.614	0.868	0.296	0.296	0.466	0.423	0.191	0.169	0.317	0.191	0.487	0.487	0.487	0.275	0.360	0.444	0.571	0.000	0.000	0.000	0.000	0.000	0.000	0.000
#		67.692	2.416	3.194	5.651	4.614	4.614	4.699	1.990	2.921	3.006	3.048	2.667	2.836	2.244	2.328	1.355	1.566	1.693	0.890	1.356	1.352	0.424	0.720	0.721	0.719	0.804	0.678	0.846	0.762	0.339	0.593	0.677	0.718	0.467	0.592	0.551	0.255	0.360	0.338	0.212	0.190	0.275	0.317	0.275	0.233	0.233	0.233	0.233	0.233	0.127	0.127	0.000	0.000	0.000	0.000	0.000	0.000	0.000
#		58.462	2.582	2.921	4.741	4.276	3.937	3.556	1.990	2.709	3.048	3.006	2.498	2.667	2.328	1.651	1.270	1.312	1.185	0.910	1.037	0.763	0.719	0.445	0.593	0.698	0.550	0.360	0.571	0.487	0.381	0.593	0.339	0.423	0.402	0.424	0.254	0.212	0.212	0.233	0.128	0.086	0.191	0.275	0.318	0.296	0.103	0.190	0.190	0.169	0.148	0.085	0.000	0.000	0.000	0.000	0.000	0.000	0.000
#		68.705	1.870	3.718	5.503	4.487	3.979	4.318	2.201	2.582	3.048	2.879	2.625	3.175	2.625	2.413	1.439	1.270	1.143	1.355	1.355	1.101	0.889	0.719	1.185	0.931	0.720	0.720	0.804	0.550	0.678	0.467	0.422	0.677	0.593	0.635	0.466	0.465	0.256	0.424	0.379	0.169	0.128	0.296	0.296	0.592	0.719	0.381	0.169	0.212	0.317	0.360	0.000	0.000	0.000	0.000	0.000	0.000	0.000
#(...)
#0	19.40999985	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000
#		0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000
#		0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000
#		0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000	0.000

#
#	Where:
#		57, 50, 0: number of rings (won't be used)
#		0.059999999, 1.299999952, 19.40999985: disc sampling height
#		77.616, 89.665, 85.789, 65.948: total width of radius (won't be used)
#		1.064	1.307	2.244	2.393	2.730...	: consecutive ring widths for a radius
#
#	Note: the last height (19.40999985) represents the top of the apex, there is no disc harvested, hence all the zeros. This height will be left out of the results.

#Input format 1 variant (example: SGC3057.txt)
#	- Identical to format 1, but radius width starts at column #2 instead of #3 (only 1 leading tab instead of 2)

#41	0.129999995	65.214	1.82	1.439	1.736	1.905	2.032	2.455	2.667	3.048	2.794	3.133	3.09	2.836	2.625	2.709	2.879	2.794	2.921	3.217	2.582	2.752	2.413	2.032	1.736	1.524	1.482	1.016	0.424	0.593	0.551	0.465	0.275	0.254	0.169	0.19	0.148	0.085	0.063	0.106	0.085	0.085	0.084
#	84.452	2.29	1.901	2.203	3.724	3.598	4.318	4.868	4.445	4.233	4.53	4.741	4.318	3.81	4.022	3.598	3.133	3.175	3.344	2.413	2.582	2.074	1.82	1.397	1.693	1.27	0.678	0.72	0.634	0.593	0.55	0.275	0.296	0.19	0.148	0.191	0.169	0.148	0.106	0.042	0.106	0.106	
#	64.391	2.074	1.736	1.693	2.244	1.947	2.794	2.836	3.683	2.836	3.344	3.048	3.302	2.921	3.302	2.794	2.54	3.133	3.006	2.032	1.905	1.863	1.482	1.312	0.677	0.635	0.847	0.804	0.72	0.635	0.677	0.423	0.193	0.233	0.147	0.127	0.085	0.085	0.106	0.063	0.065	0.042	
#	88.311	2.159	1.524	1.99	3.302	2.929	4.146	4.738	4.867	3.979	4.657	4.784	4.191	3.429	3.514	4.022	3.217	3.429	3.852	2.921	2.794	2.455	1.99	1.609	1.397	1.143	1.143	1.355	0.889	0.974	0.974	0.593	0.508	0.508	0.423	0.508	0.382	0.423	0.212	0.085	0.127	0.169	
#35	1.299999952	64.876	2.561	2.053	3.644	3.891	4.699	3.683	4.276	3.641	3.344	2.625	2.752	2.582	2.413	2.709	3.344	2.371	2.201	1.609	1.355	1.397	1.143	1.27	1.058	0.931	0.508	0.635	0.55	0.255	0.254	0.338	0.339	0.212	0.085	0.063	0.085	0	0	0	0	0	0
#	59.565	1.955	2.409	4.357	3.81	4.403	4.022	4.53	4.53	3.429	3.26	3.386	2.667	2.371	2.159	2.413	1.439	1.312	1.058	0.974	0.72	0.72	0.804	0.508	0.466	0.275	0.318	0.254	0.212	0.212	0.127	0.127	0.063	0.127	0.042	0.106	0	0	0	0	0	0	
#	60.496	2.181	2.917	4.046	3.979	4.995	3.937	4.233	3.979	3.641	2.879	2.921	2.752	2.286	2.54	2.709	1.693	1.482	1.185	1.016	0.931	0.382	0.381	0.507	0.573	0.487	0.38	0.382	0.36	0.148	0.127	0.127	0.085	0.085	0.085	0.085	0	0	0	0	0	0	
#	60.134	2.006	2.399	3.771	3.593	4.614	3.514	3.979	3.768	3.048	2.794	2.709	2.582	2.328	2.455	2.709	2.032	2.032	1.609	1.101	0.931	0.466	0.508	0.593	0.595	0.509	0.421	0.634	0.297	0.297	0.36	0.338	0.529	0.296	0.169	0.148	0	0	0	0	0	0	
#(...)

#Input format 2 (example: tyb22001.dat)
#	- row of first radius use multiple spaces as field separators 
#	- all other rows use tabs as field separators

#54      0.120    93.298  0.762   1.101   0.889   0.720   0.804   0.804   0.847   0.804   1.016   1.355   1.312   1.397   1.354   1.439   1.228   1.355   1.397   1.609   1.312   1.269   1.355   1.567   1.609   1.397   1.227   1.439   1.101   1.397   1.820   1.566   1.312   1.693   1.143   0.762   1.947   1.863   2.201   2.455   2.413   2.667   2.667   2.836   3.471   3.556   3.048   3.556   2.582   2.836   3.302   3.302   2.667   1.566   1.311   0.890
#		116.121	1.270	1.524	1.990	1.312	1.609	1.524	1.609	1.058	1.397	1.947	1.778	1.990	1.820	1.736	1.820	1.905	1.905	1.524	1.566	1.863	1.566	1.863	2.032	1.693	1.651	1.990	1.778	1.905	2.201	1.905	1.990	2.201	2.244	1.058	2.117	2.201	2.498	2.879	3.260	2.879	2.921	2.709	3.514	4.233	3.556	4.106	3.217	3.810	3.895	3.175	2.244	1.462	1.149	1.072
#		91.778	0.762	0.847	0.974	0.847	0.804	0.720	0.846	0.635	0.846	1.481	1.186	0.887	1.314	1.270	0.635	1.143	0.931	0.720	0.931	0.889	1.185	1.186	1.270	1.185	1.609	1.355	1.355	1.524	1.820	1.143	1.904	1.186	1.736	0.889	1.820	1.863	2.455	2.583	2.540	2.625	2.921	2.794	3.260	4.022	3.217	4.614	2.836	2.752	3.768	3.344	2.455	1.649	1.268	0.977
#		104.907	1.313	1.016	1.143	1.016	0.974	0.931	0.847	0.974	1.228	1.778	1.524	1.482	1.270	1.397	1.313	1.566	1.397	1.397	1.524	0.974	1.312	1.609	1.608	1.398	1.565	1.271	1.609	1.778	1.905	1.693	1.947	2.371	1.863	1.228	2.117	2.286	2.540	3.133	3.048	2.286	2.455	2.244	3.302	4.233	3.387	4.487	4.022	4.149	3.683	3.006	2.540	1.355	1.557	0.856
#49      1.300   97.622  0.762   0.762   0.635   0.931   0.974   0.847   1.143   0.720   0.931   1.524   1.524   1.439   1.228   1.312   1.397   1.524   1.312   1.355   1.355   1.566   1.778   1.863   1.482   1.482   1.270   1.482   1.524   1.820   1.566   1.693   1.778   2.286   1.863   0.804   2.159   2.328   2.963   3.048   3.260   3.852   3.133   2.498   4.022   4.487   3.810   4.276   3.683   3.755   4.416   0.000   0.000   0.000   0.000   0.000
#		74.590	0.720	0.635	0.804	0.804	1.101	0.847	0.762	0.550	0.804	1.016	1.185	1.101	1.312	1.101	1.101	0.931	0.804	0.889	0.593	1.015	0.636	0.847	0.762	0.677	0.762	0.974	0.762	0.720	1.143	0.804	0.974	1.185	0.762	0.423	1.524	1.609	2.413	2.582	2.455	2.582	2.201	1.905	3.556	4.699	3.725	4.191	3.429	3.767	4.446	0.000	0.000	0.000	0.000	0.000
#		84.457	0.677	0.974	0.720	1.355	0.804	0.847	0.804	0.466	0.339	0.847	1.270	1.270	1.270	1.101	1.143	1.143	1.058	1.101	0.847	0.931	0.974	1.143	0.889	0.889	0.889	1.439	1.143	0.974	1.482	1.185	1.016	1.524	1.524	0.720	1.820	2.032	2.074	2.328	3.133	3.090	3.090	2.498	3.598	4.572	4.276	4.911	3.429	3.806	5.042	0.000	0.000	0.000	0.000	0.000
#		84.708	1.354	0.847	0.847	0.677	0.720	0.847	0.931	0.677	0.762	0.931	1.397	1.185	1.058	1.228	1.101	1.228	1.228	1.143	1.101	1.270	1.143	1.312	1.143	1.101	1.058	1.312	1.270	1.228	1.609	1.312	1.228	1.693	1.312	0.762	2.286	2.328	2.752	2.963	3.090	3.133	3.048	2.371	3.344	3.471	3.133	3.979	3.090	3.429	4.276	0.000	0.000	0.000	0.000	0.000
#(...)

#Input format 3 (example: TYC32201.DAT)
#	- all rows use multiple spaces as field separators

#41      0.220  108.203 2.422   3.335   3.683   4.445   4.106   5.546   5.976   5.878   4.106   3.817   3.972   7.493   5.165   3.266   4.738   3.385   3.724   3.048   2.328   1.778   2.582   2.498   1.566   1.355   1.397   1.27    1.736   1.651   1.99    2.158   0.974   1.101   1.101   0.677   1.524   1.1     0.635   0.169   0.169   0.339
#               110.365 2.413   3.641   3.81    4.572   4.995   5.08    5.122   4.106   3.895   3.305   4.827   5.422   4.1     3.302   3.26    2.963   3.387   2.879   3.05    2.919   2.926   2.789   2.287   2.031   2.202   2.879   2.371   1.609   1.692   1.778   1.693   1.355   1.185   1.186   1.1     1.101   1.101   0.508   0.593   0.508   
#               127.552 2.625   3.598   3.557   4.995   5.25    5.926   6.689   4.868   4.614   4.699   4.784   5.165   4.868   4.106   4.318   3.98    4.529   3.006   1.947   2.752   2.836   3.048   2.455   2.117   3.175   3.429   1.99    2.286   2.879   2.582   1.693   1.736   1.863   1.609   2.159   1.609   1.609   0.635   0.423   0.72    
#               104.389 2.328   3.344   3.598   5.122   4.445   5.503   5.249   4.106   3.979   4.064   4.065   4.953   4.148   2.921   2.921   3.006   4.614   4.064   2.201   2.201   3.471   2.455   1.947   1.736   2.328   2.244   2.074   1.314   1.522   1.397   1.27    0.847   0.762   0.931   0.847   0.804   0.508   0.381   0.212   0.169   
#38      1.300  112.353 2.201   4.487   5.334   5.038   5.122   4.911   4.784   4.614   4.445   3.979   4.53    3.217   3.26    2.583   3.64    2.455   2.159   1.778   1.609   1.905   1.99    1.822   2.03    2.328   1.863   2.201   4.149   4.53    3.811   3.005   2.836   2.032   2.455   1.609   1.609   0.55    0.55    0.932   0       0
#               88.902  1.964   3.963   4.741   5.249   4.657   3.979   4.065   3.56    3.721   4.233   3.895   2.371   1.862   1.99    3.048   2.921   1.863   1.312   1.736   1.524   1.228   1.101   1.397   2.032   1.609   1.524   2.794   2.709   1.778   1.566   1.482   1.609   1.947   1.228   1.058   0.255   0.295   0.636   0       0         
#               89.07   1.695   4.57    4.487   5.673   5.165   4.657   3.683   3.429   4.191   4.233   3.302   2.836   1.947   1.609   2.201   2.709   2.286   1.609   1.863   1.99    1.058   1.143   1.312   1.566   1.482   1.101   1.947   2.244   2.117   1.524   1.143   1.905   2.286   1.439   1.228   0.339   0.466   0.635   0       0        
#               97.071  1.955   4.48    5.376   5.038   4.953   4.403   4.741   4.868   4.53    5.63    4.572   3.133   3.896   3.004   3.514   3.302   2.288   1.607   1.355   1.948   1.396   1.016   1.397   1.355   1.609   1.566   1.821   1.354   1.99    1.143   1.439   1.312   1.863   1.185   0.889   0.296   0.381   0.466   0       0        
#(...)


#Input format 4 (example: tyb10801.dat)
#	- rings no and sampling height on a separate line from the rest
#	- some rows use multiple spaces as field separators, some others use tabs.

#54      0.100
#        28.3    0.084   0.085   0.148   0.063   0.148   0.19    0.19    0.296   0.19    0.191   0.106   0.233   0.36    0.508   0.296   0.254   0.212   0.19    0.148   0.169   0.254   0.402   0.423   0.297   0.593   0.635   0.847   0.931   0.974   0.804   0.635   0.614   0.275   0.424   0.593   0.847   0.72    0.804   0.847   0.762   0.593   0.804   0.847   1.058   1.439   0.762   0.635   0.593   0.889   0.847   0.847   0.847   0.845   0.552
#        57.954  0.529   0.508   0.508   0.381   0.36    0.466   0.698   0.72    0.381   0.275   0.169   0.466   0.593   0.677   0.55    0.91    0.762   0.783   0.677   0.762   0.889   1.439   0.889   1.058   1.101   1.482   1.778   1.693   1.482   1.143   1.482   1.27    1.397   1.355   1.482   1.397   1.524   1.312   1.397   1.27    1.058   1.863   1.439   1.439   2.286   1.482   1.482   2.54    1.355   1.524   1.118   1.189   0.762   0.402 
#	31.134	0.233	0.169	0.148	0.233	0.127	0.19	0.148	0.233	0.296	0.233	0.233	0.317	0.507	0.635	0.423	0.318	0.423	0.169	0.381	0.254	0.339	0.444	0.297	0.36	0.72	0.698	0.741	1.037	0.529	0.889	0.782	0.848	1.143	1.016	0.783	0.53	0.508	0.593	0.847	0.55	0.55	0.889	0.974	0.931	1.312	0.804	0.762	0.72	0.931	0.889	0.973	0.825	0.68	0.57	
#	49.655	0.487	0.423	0.381	0.296	0.19	0.296	0.402	0.381	0.317	0.233	0.191	0.381	0.593	0.593	0.423	0.55	0.55	0.466	0.466	0.466	0.677	0.931	0.72	0.762	1.185	1.27	1.101	1.312	1.228	1.312	1.397	1.439	0.804	1.312	1.439	1.312	1.228	1.524	1.143	1.101	1.101	1.439	1.27	1.524	1.905	1.608	1.439	1.8	1.291	1.524	0.845	1.481	0.786	0.36	
#46      1.300
#        31.557  0.296   0.212   0.254   0.254   0.169   0.148   0.127   0.169   0.275   0.254   0.148   0.169   0.169   0.339   0.339   0.593   0.254   0.804   0.381   0.339   0.381   0.423   0.635   0.677   0.889   0.889   0.804   0.677   0.635   0.677   0.72    0.762   0.677   0.762   0.804   0.847   0.847   0.889   0.72    1.439   1.185   1.355   2.413   1.968   2.409   1.38    0       0       0       0       0       0       0       0
#	46.439	0.169	0.106	0.106	0.148	0.127	0.148	0.169	0.254	0.171	0.296	0.381	0.55	0.466	0.55	0.466	0.466	0.55	0.677	0.72	0.72	0.931	0.931	1.143	1.439	1.651	1.524	1.566	1.439	1.143	0.931	1.439	1.27	1.609	1.439	1.482	1.524	1.609	1.693	1.27	2.244	1.863	1.778	2.159	1.947	1.901	1.274	0	0	0	0	0	0	0	0	
#	37.442	0.296	0.275	0.381	0.402	0.296	0.275	0.381	0.254	0.508	0.423	0.508	0.402	0.402	0.614	0.571	0.529	0.275	0.55	0.529	0.508	0.529	0.508	0.635	0.762	0.931	1.185	0.847	0.889	0.974	0.974	1.058	0.931	0.72	1.101	1.058	1.228	1.101	1.185	1.016	1.693	1.439	1.482	1.863	1.863	1.884	1.207	0	0	0	0	0	0	0	0	
#	34.246	0.254	0.275	0.233	0.169	0.148	0.275	0.19	0.317	0.233	0.275	0.275	0.254	0.296	0.275	0.381	0.275	0.339	0.233	0.381	0.444	0.593	0.677	0.656	1.101	0.931	1.312	0.847	0.931	0.677	0.889	0.677	0.72	0.889	0.804	0.635	1.016	0.974	0.974	0.847	1.693	1.609	1.482	2.433	2.012	2.21	1.135	0	0	0	0	0	0	0	0	
#(...)


#Output format
#	A1012   1       0.059999999     1       2000    1.064
#	A1012   1       0.059999999     1       1999    1.307
#	A1012   1       0.059999999     1       1998    2.244
#	A1012   1       0.059999999     1       1997    2.393
#	A1012   1       0.059999999     1       1996    2.730
#
#	Where:
#		Col 1: tree name
#		Col 2: disc number
#		Col 3: disc sampling height
#		Col 4: radius number
#		Col 5: last ring year
#		Col 6: ring width (mm)


#-------------------------------------------------------------------
#Program
#-------------------------------------------------------------------

#Start of capture in the log
{


#Variables declaration & definition
declare -i disc_no			#disc number, incremented from bottom (stump) to top (apex)
declare -i radius_no			#radius number

#latest_ring_year=2000		#Set value of last ring year (FOR TEST ONLY)
#reading_order=1			#1. pith to bark (latest year at the end); 2. bark to pith (lastest year at the beginning) (FOR TEST ONLY)

#Internal field separator in bash set to newline (for loops)
IFS='
'

#Colors
red_color="\033[1;31m"
normal_color="\033[0m"


#Create the outfile
printf "" > extract_windendro_rings_outfile.txt


#Check parameters
infolder=${1}
ref_file=${2}

#If parameter #1 is missing or doesn't lead to an existing folder, warn and exit
if [ -z ${infolder} ]; then printf "${red_color}Infiles folder (parameter #1) is missing!\nABORTING\n${normal_color}";exit 0;fi
if [ ! -e ${infolder} ]; then printf "${red_color}The folder ${infolder} doesn't exist!\nABORTING\n${normal_color}";exit 0;fi

#If parameter #2 is missing or doesn't lead to an existing file, warn and exit
if [ -z ${ref_file} ]; then printf "${red_color}Reference file (parameter #2) is missing!\nABORTING\n${normal_color}";exit 0;fi
if [ ! -e ${ref_file} ]; then printf "${red_color}The reference file ${ref_file} doesn't exist!\nABORTING\n${normal_color}";exit 0;fi

#List files (column #1) that are not in the reference file
join -v2 <(cut -f1 -d $'\t' ${ref_file}|sort) <(ls -1 ${infolder}|sort) > /dev/shm/files_not_in_list.txt 

#files_missing_in_list_count=$(cat /dev/shm/files_not_in_list.txt|wc -l)
#if [ $files_missing_in_list_count -gt 0 ]

if [ -s /dev/shm/files_not_in_list.txt ]
then
	printf "${red_color}The following files are missing from the ${ref_file} list:\n"
	cat /dev/shm/files_not_in_list.txt|perl -pe 's/^/\t/g'
	printf "ABORTING\n${normal_color}"
	exit 0
fi

#Check for incorrect years (column #2) in the reference file
awk -F "\t" '{ if ($2 < 900 || $2 > 2100) print}' ${ref_file} > /dev/shm/incorrect_harvest_year_in_list.txt

if [ -s /dev/shm/incorrect_harvest_year_in_list.txt  ]
then
	printf "${red_color}Some of the specified harvest years are incorrect (accepted range: 800 - 2100):\n"
	cat /dev/shm/incorrect_harvest_year_in_list.txt |perl -pe 's/^/\t/g'
	printf "ABORTING\n${normal_color}"
	exit 0
fi

#Check for incorrect reading directions (column #3) in the reference file
awk -F "\t" '{ if (tolower($3) !~ /pith2/ && tolower($3) !~ /bark2/) print}' ${ref_file} > /dev/shm/incorrect_reading_directions_in_list.txt 

if [ -s /dev/shm/incorrect_reading_directions_in_list.txt  ]
then
	printf "${red_color}Some of the specified reading directions are incorrect (accepted: pith2b or bark2p):\n"
	cat /dev/shm/incorrect_reading_directions_in_list.txt |perl -pe 's/^/\t/g'
	printf "ABORTING\n${normal_color}"
	exit 0
fi


#Cycle through all files in infolder
 for current_file in $(ls -1 ${infolder}|sort)
 do

	#Extract file name without the extension
	current_file_wo_ext=$(echo $current_file|perl -pe 's/\.\w+$//g')	#e.g. SGA1012

	#Extract tree name from file name without extension
	current_tree_name=$(echo $current_file_wo_ext|perl -pe 's/^\w\w//g')	#e.g. A1012

	#Extract harvest year from reference file
	latest_ring_year=$(awk -F "\t" -v cf=${current_file} '{if ($1 == cf) print $2}' ${ref_file})

	#Create a list of 100 years decreasing from the last ring's year (bark to pith order)
	seq $latest_ring_year -1 $(echo $(($latest_ring_year-100))) > /dev/shm/ring_years_b2p.txt
	#2000
	#1999
	#1998
	#1997
	#(...)

	#Create the same list, in increasing order (pith to bark order)
	sort -n /dev/shm/ring_years_b2p.txt > /dev/shm/ring_years_p2b.txt
	#(...)
	#1997
	#1998
	#1999
	#2000

	#Extract reading direction from reference file
	#1 = pith to bark (latest year at the end); 2 = bark to pith (lastest year at the beginning); 0 = NONE FOUND.
	reading_order=$(awk -F "\t" -v cf=${current_file} '{if ($1 == cf) print $3}' ${ref_file}|awk '{if (tolower($1) ~ /pith/) print "1"; else print "2"}')

	#Clean file
	#1. convert to Unix (replacing end of line CRLF with LF)
	dos2unix ${infolder}/${current_file} 2> /dev/null

	#2. remove empty lines
	grep -v '^$' ${infolder}/${current_file} > /dev/shm/1_no_empty_lines.txt

	#3. replace spaces with tabs
	perl -pe 's/ +/\t/g' /dev/shm/1_no_empty_lines.txt > /dev/shm/2_spaces2tabs.txt

	#4. replace multiple leading tabs with one
	perl -pe 's/^\t+/\t/g' /dev/shm/2_spaces2tabs.txt > /dev/shm/3_keep1leadingtab.txt

	#5. Insert a newline after rings count & sampling height
	perl -pe 's/^(\d{1,3})\t(\d+\.\d+)\t/\1\t\2\n\t/g' /dev/shm/3_keep1leadingtab.txt > /dev/shm/4_ring_nb_separated.txt

	#57	0.059999999
	#	77.616	1.064	1.307	2.244	2.393	2.730	2.201	3.090	4.064	3.344	3.344	2.963	1.482	2.371	3.175	3.302	2.752	3.217	2.667	1.524	1.524	1.778	1.736	1.397	1.566	1.778	0.847	1.016	1.397	1.037	1.185	1.545	1.312	1.016	0.762	0.550	1.016	0.889	0.572	0.868	0.974	0.487	0.297	0.317	0.338	0.127	0.148	0.148	0.148	0.381	0.296	0.170	0.168	0.169	0.106	0.148	0.106	0.063
	#	89.665	1.231	1.285	2.184	2.625	2.752	2.371	2.963	4.445	3.641	3.641	4.191	1.863	2.921	3.387	3.471	3.302	3.133	3.175	2.752	2.540	2.117	1.820	1.609	1.863	1.397	1.228	1.270	1.524	1.143	1.058	1.696	1.013	1.185	1.101	1.143	0.890	1.058	0.634	0.931	0.720	0.550	0.381	0.382	0.254	0.402	0.275	0.212	0.275	0.296	0.550	0.868	0.339	0.275	0.169	0.275	0.402	0.487
	#	85.789	0.931	1.736	1.905	2.307	2.646	2.667	2.794	3.810	3.810	3.090	3.090	1.609	2.371	3.006	3.556	3.154	3.535	3.387	2.709	2.371	2.286	1.905	1.990	1.609	1.461	1.079	1.228	1.630	1.037	1.122	1.376	1.206	0.847	1.122	0.741	0.783	0.868	0.804	1.249	0.635	0.550	0.656	0.635	0.783	0.318	0.211	0.190	0.233	0.635	0.614	0.317	0.148	0.148	0.212	0.254	0.233	0.190
	#	65.948	1.104	1.224	2.286	2.244	2.540	1.947	2.794	3.979	3.471	3.344	3.217	1.693	2.159	2.625	3.048	2.752	1.905	2.159	2.201	1.693	1.651	1.080	1.355	1.482	1.016	0.783	0.762	1.037	0.783	0.698	0.698	0.719	0.762	0.487	0.254	0.212	0.275	0.465	0.550	0.423	0.169	0.212	0.190	0.317	0.222	0.191	0.159	0.074	0.070	0.036	0.068	0.049	0.079	0.048	0.081	0.046	0.060
	#50	1.299999952
	#	68.074	2.140	3.321	4.530	4.403	3.810	3.641	2.371	3.006	3.556	2.709	2.498	3.217	2.286	2.032	1.820	1.312	1.524	0.953	1.376	1.397	0.656	0.656	0.847	0.677	0.974	0.974	0.889	0.699	0.614	0.339	0.762	0.720	0.423	0.614	0.868	0.296	0.296	0.466	0.423	0.191	0.169	0.317	0.191	0.487	0.487	0.487	0.275	0.360	0.444	0.571	0.000	0.000	0.000	0.000	0.000	0.000	0.000
	#	67.692	2.416	3.194	5.651	4.614	4.614	4.699	1.990	2.921	3.006	3.048	2.667	2.836	2.244	2.328	1.355	1.566	1.693	0.890	1.356	1.352	0.424	0.720	0.721	0.719	0.804	0.678	0.846	0.762	0.339	0.593	0.677	0.718	0.467	0.592	0.551	0.255	0.360	0.338	0.212	0.190	0.275	0.317	0.275	0.233	0.233	0.233	0.233	0.233	0.127	0.127	0.000	0.000	0.000	0.000	0.000	0.000	0.000
	#	58.462	2.582	2.921	4.741	4.276	3.937	3.556	1.990	2.709	3.048	3.006	2.498	2.667	2.328	1.651	1.270	1.312	1.185	0.910	1.037	0.763	0.719	0.445	0.593	0.698	0.550	0.360	0.571	0.487	0.381	0.593	0.339	0.423	0.402	0.424	0.254	0.212	0.212	0.233	0.128	0.086	0.191	0.275	0.318	0.296	0.103	0.190	0.190	0.169	0.148	0.085	0.000	0.000	0.000	0.000	0.000	0.000	0.000
	#	68.705	1.870	3.718	5.503	4.487	3.979	4.318	2.201	2.582	3.048	2.879	2.625	3.175	2.625	2.413	1.439	1.270	1.143	1.355	1.355	1.101	0.889	0.719	1.185	0.931	0.720	0.720	0.804	0.550	0.678	0.467	0.422	0.677	0.593	0.635	0.466	0.465	0.256	0.424	0.379	0.169	0.128	0.296	0.296	0.592	0.719	0.381	0.169	0.212	0.317	0.360	0.000	0.000	0.000	0.000	0.000	0.000	0.000


	printf "File: ${current_file}\tTree: ${current_tree_name}\tHarvested in: ${latest_ring_year}\tReading order: ${reading_order} (1=Pith2b; 2=Bark2p)\n" 


	#Set disc number to 0
	disc_no=0

	#Review every line of the file
	for line in $(cat /dev/shm/4_ring_nb_separated.txt)
	do
		#Extract first column value (either the number of rings or "")
		col1_value=$(echo $line|cut -f1 -d $'\t')
		
		#If it is not empty, it represents the number of rings in a new disc
		if [[ $col1_value != "" ]]
		then
			
			#If the number of rings is zero, this is the top of the tree, no disc taken, exit the for.
			if [[ $col1_value == "0" ]]
			then
				printf "\tApex reached (${col1_value} rings), moving to the next tree.\n\n"
				break
			fi
			
			disc_no=disc_no+1 #New disc
			radius_no=0	#Reset radius counter
			sampling_ht=$(echo $line|cut -f2 -d $'\t')	#Extract sampling height in column #2
		
			printf "\tDisc no: ${disc_no} (${sampling_ht})\n"
		
		
		else	#empty first column = a row with ring widths
			
			radius_no=radius_no+1	#New radius

			printf "\t\tRadius no: ${radius_no}\n" 
			
			#NOTE: the 3 following commands could be fused into one, they have been split for debugging purposes
				
			#Remove leading tab and column with radius width
			echo $line|cut -f1,2 --complement -d $'\t' >  /dev/shm/5_curr_line_widths.txt
			
			#Remove trailing tabs and trailing zeros
			perl -pe 's/\t+$//g' /dev/shm/5_curr_line_widths.txt|perl -pe 's/\t(0\.0+\t)+0\.0+$//g'|perl -pe 's/\t(0+\t)+0+$//g' >  /dev/shm/6_curr_line_widths_no_trailing_0s.txt
			
			#Transpose ring width from columns to rows
			perl -pe 's/\t/\n/g' /dev/shm/6_curr_line_widths_no_trailing_0s.txt > /dev/shm/7_curr_line_transposed.txt

			#1.064
			#1.307
			#2.244
			#2.393
			#2.730
			#(...)
		
			#Check if there are zero-width values (other than already-removed trailing zeros)
			#For now, warning only.
			rings_with_zero_width=$(awk '{if ($1 == 0) print}' /dev/shm/7_curr_line_transposed.txt|wc -l)
			if [ $rings_with_zero_width -gt 0 ]
			then
				printf "\t\t\tThere are zero-width ring values. Please check data.\n"
			fi
		
		
			#Count the number of ring widths
			lines_count=$(cat /dev/shm/7_curr_line_transposed.txt|wc -l)
			
			#Extract the corresponding ring years
			if [ ${reading_order} -eq 1 ]
			then	#pith to bark order
				tail -${lines_count} /dev/shm/ring_years_p2b.txt > /dev/shm/ring_years_curr_line.txt
			else	#bark to pith order
				head -${lines_count} /dev/shm/ring_years_b2p.txt > /dev/shm/ring_years_curr_line.txt
			fi
				
			#Put side by side:
			#	1. tree name, disc number, sampling height, radius number (same values repeated $lines_count times)
			#	2. ring years, decreasing (bark to pith) or increasing (pith to bark)
			#	3. ring widths from above
			#Reorder by year
			#Append to output file.
			paste <(printf "${current_tree_name}\t${disc_no}\t${sampling_ht}\t${radius_no}"|awk -v awk_lc=${lines_count} '{for(i=0;i<awk_lc;i++)print}') /dev/shm/ring_years_curr_line.txt /dev/shm/7_curr_line_transposed.txt |sort -k5,5n >> extracte_windendro_rings_outfile.txt
			#A1012   1       0.059999999     1       2000    1.064
			#A1012   1       0.059999999     1       1999    1.307
			#A1012   1       0.059999999     1       1998    2.244
			#A1012   1       0.059999999     1       1997    2.393
			#A1012   1       0.059999999     1       1996    2.730
			#(...)
		
		fi

		#for test only***********************************
		#if [ $disc_no -eq 3 ]; then exit; fi 


	done	#Next line of file 





done	#Next file


#-------------------------------------------------------------------
#Delete temporary files
#-------------------------------------------------------------------

rm /dev/shm/1_no_empty_lines.txt
rm /dev/shm/2_spaces2tabs.txt
rm /dev/shm/3_keep1leadingtab.txt
rm /dev/shm/4_ring_nb_separated.txt
rm /dev/shm/5_curr_line_widths.txt
rm /dev/shm/6_curr_line_widths_no_trailing_0s.txt
rm /dev/shm/7_curr_line_transposed.txt
rm /dev/shm/ring_years*.txt
rm /dev/shm/files_not_in_list.txt
rm /dev/shm/incorrect_harvest_year_in_list.txt
rm /dev/shm/incorrect_reading_directions_in_list.txt

exit


#End of the capture in the log
} 2>&1|tee  extract_rings_from_windendro_format_log.txt
